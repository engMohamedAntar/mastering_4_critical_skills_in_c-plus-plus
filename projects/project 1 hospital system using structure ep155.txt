#include<iostream>
using namespace std;

const int max_specialization=20;
const int max_queue=5;

struct hospital_queue
{
  string names[max_queue];
  int status[max_queue];
  int spec,queue_len;

  hospital_queue()
  {
      spec=-1,queue_len=0;
  }
  hospital_queue(int spec_)
  {
      spec=spec_ , queue_len=0;
  }
  bool add_end(string name,int st )
  {
      if(queue_len>=max_queue)
          return false;

      names[queue_len]=name;
      status[queue_len]=st;
      queue_len++;
      return true;
  }
  bool add_front(string name,int st)
  {
      if(queue_len>=max_queue)
          return false;
      //shift right
      for(int i=queue_len-1;i>=0;i--)
      {
          names[i+1]=names[i];
          status[i+i]=status[i];
      }
      names[0]=name;
      status[0]=st;
      queue_len++;
      return true;
  }
  void remove_front()
  {
      //shift left
      for(int i=1;i<queue_len;i++)
      {
          names[i-1]=names[i];
          status[i-1]=status[i];
          queue_len--;
      }
  }
    void print()
    {
        if(queue_len==0)
            return;
        cout<<"There are "<<queue_len<<" patients in specialization "<<spec<<"\n";
        for(int i=0;i<queue_len;i++)
        {
            cout<<names[i]<<" ";
            if(status[i])
                cout<<"Urgent\n";
            else
                cout<<"Regular\n";
        }
    }
};
struct hospital_system
{
    hospital_queue queues[max_specialization];
    hospital_system()
    {
        for(int i=0;i<max_specialization;i++)//spec value of each object (queues[i]) will be initialized by i
        {
         queues[i]=hospital_queue(i);
        }
    }
    bool add_patient()//if any error will be here
    {
        cout<<"Enter specialization, name, status\n";
        int spec,st;string name;
        cin>>spec>>name>>st;
        bool x;
        if(st==0)
            x=queues[spec].add_end(name,st);
        else
            x=queues[spec].add_front(name,st);
        if(x==false)
        {
          cout<<"Can't add any more patients in this specialization\n";
          return false;
        }

        return true;
    }
    void print_patient()
    {
        cout<<"****************\n";
        for(int i=0;i<max_specialization;i++)
            queues[i].print();
    }
    void get_next_patinet()
    {
        cout<<"Choose a specialization\n";
        int spec;cin>>spec;
        if(queues[spec].queue_len==0)
        {
           cout<<"there are no more patients in specialization "<<spec<<" have a rest Dr.\n";
           return;
        }
        string x=queues[spec].names[0];
        queues[spec].remove_front();
        cout<<x<<"\n";
    }
    int menu()
    {
        int choice=-1;
        while (choice==-1)
        {
        cout<<"Enter your choice: \n";
        cout<<"1-Add patient\n";
        cout<<"2-Print all patients\n";
        cout<<"3-Get next patient\n";
        cout<<"4-Exit\n";
        cin>>choice;
        if(!(choice>=1&&choice<=4))
            choice=-1;
        }
        return choice;
    }
    void run()
    {
        while(true)
        {
            int choice=menu();
            if(choice==1)
                add_patient();
            else if(choice==2)
                print_patient();
            else if(choice==3)
                get_next_patinet();
            else
                break;
        }
    }

};
int main()
{
    hospital_system hospital =hospital_system();//will call the empty constructor of hospital_system ;
    hospital.run();
    return 0;
}
